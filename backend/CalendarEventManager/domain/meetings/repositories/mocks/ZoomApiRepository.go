// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/LuisDiazM/calendar-manager/calendar-event-manager/domain/meetings/entities"
	mock "github.com/stretchr/testify/mock"
)

// ZoomApiRepository is an autogenerated mock type for the ZoomApiRepository type
type ZoomApiRepository struct {
	mock.Mock
}

// CreateZoomMeeting provides a mock function with given fields: token, userId, meeting
func (_m *ZoomApiRepository) CreateZoomMeeting(token string, userId string, meeting entities.MeetingResponse) *entities.MeetingResponse {
	ret := _m.Called(token, userId, meeting)

	var r0 *entities.MeetingResponse
	if rf, ok := ret.Get(0).(func(string, string, entities.MeetingResponse) *entities.MeetingResponse); ok {
		r0 = rf(token, userId, meeting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.MeetingResponse)
		}
	}

	return r0
}

// GenerateAccessToken provides a mock function with given fields:
func (_m *ZoomApiRepository) GenerateAccessToken() *entities.AccessTokenResponse {
	ret := _m.Called()

	var r0 *entities.AccessTokenResponse
	if rf, ok := ret.Get(0).(func() *entities.AccessTokenResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AccessTokenResponse)
		}
	}

	return r0
}

type mockConstructorTestingTNewZoomApiRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewZoomApiRepository creates a new instance of ZoomApiRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewZoomApiRepository(t mockConstructorTestingTNewZoomApiRepository) *ZoomApiRepository {
	mock := &ZoomApiRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
