// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/LuisDiazM/calendar-manager/calendar-event-manager/domain/meetings/entities"
	mock "github.com/stretchr/testify/mock"
)

// WriteMeetingRepository is an autogenerated mock type for the WriteMeetingRepository type
type WriteMeetingRepository struct {
	mock.Mock
}

// CreateMeeting provides a mock function with given fields: meeting
func (_m *WriteMeetingRepository) CreateMeeting(meeting entities.Meetings) error {
	ret := _m.Called(meeting)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Meetings) error); ok {
		r0 = rf(meeting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMeeting provides a mock function with given fields: id
func (_m *WriteMeetingRepository) DeleteMeeting(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMeeting provides a mock function with given fields: meeting
func (_m *WriteMeetingRepository) UpdateMeeting(meeting entities.Meetings) error {
	ret := _m.Called(meeting)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Meetings) error); ok {
		r0 = rf(meeting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWriteMeetingRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWriteMeetingRepository creates a new instance of WriteMeetingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWriteMeetingRepository(t mockConstructorTestingTNewWriteMeetingRepository) *WriteMeetingRepository {
	mock := &WriteMeetingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
