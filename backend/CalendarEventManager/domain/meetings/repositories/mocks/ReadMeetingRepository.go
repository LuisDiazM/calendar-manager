// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/LuisDiazM/calendar-manager/calendar-event-manager/domain/meetings/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReadMeetingRepository is an autogenerated mock type for the ReadMeetingRepository type
type ReadMeetingRepository struct {
	mock.Mock
}

// GetMeetingsByUser provides a mock function with given fields: userId, timestamp
func (_m *ReadMeetingRepository) GetMeetingsByUser(userId string, timestamp time.Time) (*[]entities.Meetings, error) {
	ret := _m.Called(userId, timestamp)

	var r0 *[]entities.Meetings
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time) (*[]entities.Meetings, error)); ok {
		return rf(userId, timestamp)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) *[]entities.Meetings); ok {
		r0 = rf(userId, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Meetings)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(userId, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMeeting provides a mock function with given fields: id
func (_m *ReadMeetingRepository) ReadMeeting(id string) (*entities.Meetings, error) {
	ret := _m.Called(id)

	var r0 *entities.Meetings
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Meetings, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Meetings); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Meetings)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReadMeetingRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReadMeetingRepository creates a new instance of ReadMeetingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReadMeetingRepository(t mockConstructorTestingTNewReadMeetingRepository) *ReadMeetingRepository {
	mock := &ReadMeetingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
