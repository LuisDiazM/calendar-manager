// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/LuisDiazM/calendar-manager/calendar-event-manager/domain/usecases/users/entities"
	mock "github.com/stretchr/testify/mock"
)

// GetUserRepository is an autogenerated mock type for the GetUserRepository type
type GetUserRepository struct {
	mock.Mock
}

// GetUserById provides a mock function with given fields: id
func (_m *GetUserRepository) GetUserById(id string) (*entities.Users, error) {
	ret := _m.Called(id)

	var r0 *entities.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Users, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Users); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetUserRepository creates a new instance of GetUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetUserRepository(t mockConstructorTestingTNewGetUserRepository) *GetUserRepository {
	mock := &GetUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
