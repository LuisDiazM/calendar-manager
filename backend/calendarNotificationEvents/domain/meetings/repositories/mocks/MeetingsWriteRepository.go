// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/LuisDiazM/calendar-manager/calendar-notification-events/domain/meetings/entities"
	mock "github.com/stretchr/testify/mock"
)

// MeetingsWriteRepository is an autogenerated mock type for the MeetingsWriteRepository type
type MeetingsWriteRepository struct {
	mock.Mock
}

// CreateMeetingEvent provides a mock function with given fields: meeting, ctx
func (_m *MeetingsWriteRepository) CreateMeetingEvent(meeting entities.Meetings, ctx context.Context) interface{} {
	ret := _m.Called(meeting, ctx)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(entities.Meetings, context.Context) interface{}); ok {
		r0 = rf(meeting, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewMeetingsWriteRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMeetingsWriteRepository creates a new instance of MeetingsWriteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMeetingsWriteRepository(t mockConstructorTestingTNewMeetingsWriteRepository) *MeetingsWriteRepository {
	mock := &MeetingsWriteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
